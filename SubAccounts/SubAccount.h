#ifndef _SUBACCOUNT_
#define _SUBACCOUNT_
//the parent class of both sub-accounts
//has a ifndef which allows the higher level files to pull from each child in a seperate file and not double pull the parent
//including all functionality required for upper level files
#include <string>
#include <iostream>
#include <functional>
#include <cctype>
#include <map>
#include <vector>
#include <limits>
using namespace std;

class SubAccount{
    protected:
    unsigned int balance;
    string accountNumber;

    public:
    //getters and setters
    unsigned int getBalance() const { return balance; }
    string getAccountNumber() const { return accountNumber; }
    //needs virtual because c++ cannot handle some deconstructing errors
    virtual ~SubAccount() {}
    //functionality
    //deposit amount cannot be negative
    //virtual because will be redefined in checking account
    virtual void deposit(unsigned int amount) {
        if(amount < 0) {
            cout<<endl<<"Cannot deposit negative amount"<<endl; 
            return;}
        balance += amount;
        cout<<endl<<"Successfully deposited balance: "<<balance<<endl; 
        return;}

    //withdraw cannot make balance negative, also virtual 
    virtual void withdraw(unsigned int amount) { 
        if (amount > balance) {
            cout<<endl<<"Cannot withdraw money that is not there"<<endl; 
            return;}
        balance -= amount;
        cout<<endl<<"Successfully withdrew, balance is now: "<<balance<<endl; 
        return;}

    //defining a default menu option, will call menu contents to print out the menu and intiate the loop
    void menu(){
        char userChoice='0';
        while(userChoice!='X'){
        cout<<"Eligiable services for Sub-Account:"<<accountNumber<<endl;
        cout<<getMenuContents()<<endl;
        cin>>userChoice;
        userChoice=toupper(userChoice);
        userChoiceReaction(userChoice);
        // //was having issues with cin taking different input types, clearing here helped resolve error
        // cin.clear();
        // cin.ignore(numeric_limits<streamsize>::max(), '\n');
        }
    }
    //function will take input generated by the menu option and call methods based on that
    //it is virtual because it will be redefined in the checking account
    //all user input is dealt with inside the case, so that the functions remain pure
    virtual void userChoiceReaction(char choice){
        switch(choice){
            case 'D':{
                unsigned int amountToDeposit;
                cout<<"Please enter the amount to deposit"<<endl;
                cin>>amountToDeposit;
                deposit(amountToDeposit);
                break;
            }
            case 'W':{
                unsigned int amountToWithdraw;
                cout<<"Please enter the amount to withdraw"<<endl;
                cin>>amountToWithdraw;
                withdraw(amountToWithdraw);
                break;
            }
            case 'X':{
                cout<<"Goodbye"<<endl;
                break;
            }
            default:{
                cout<<endl<<"Please enter a valid choice"<<endl;
                break;
            }
        }
    }
        //in order to change menu's, this function must be in checking, so this is virtual
    virtual string getMenuContents() const {
        return " D -- Deposit \n W -- Withdraw \n X -- Exit \n Please enter your selection: \n";
    }

};
#endif 